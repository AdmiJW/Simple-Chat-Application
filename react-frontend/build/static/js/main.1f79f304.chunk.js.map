{"version":3,"sources":["Pages/Components/Navbar.js","Pages/Homepage.js","Pages/Components/Messagebox.js","Pages/Components/Message.js","Pages/Components/PendingMessage.js","Pages/Components/TypingAlert.js","Pages/Components/ListMessage.js","Pages/Components/UsersOnline.js","Pages/Components/ConnectionMessage.js","Pages/Components/UsersUI.js","client-socket.js","Pages/ChatRoom.js","Pages/App.js","index.js"],"names":["Navbar","className","to","fill","viewBox","xmlns","fillRule","d","clipRule","href","target","rel","Homepage","history","useHistory","useState","username","setUsername","alertMsg","setAlertMsg","onSubmit","e","preventDefault","length","push","type","name","id","placeholder","value","onChange","Messagebox","props","emit_Message","emit_On_Typing_Event","setIsMobileViewOpen","message","setMessage","onClick","prev","stroke","strokeLinecap","strokeLinejoin","strokeWidth","disabled","undefined","Message","isSelf","date","text","Date","toLocaleString","PendingMessage","TypingAlert","peopleThatAreTyping","alert","ListMessage","messages","pendingMessages","map","getTime","UsersOnline","onlineUsers","ConnectionMessage","connectionMessagesJSX","connectionMessages","timestamp","payload","UsersUI","isMobileViewOpen","initializeClientSocket","state_setters","setOnlineUsers","setPeopleCurrTyping","setMessages","setConnectionMessages","setPendingMessages","socket","io","on","error","console","emit","filter","set_On_Disconnected_Event","errorMsg","set_On_Error_Event","users","JSON","parse","set_On_Fetch_Online_Users_Event","set_On_Joined_Event","set_On_Message_Event","selfUsername","msg","set_On_Message_Sent_Event","set_On_Stop_Typing_Event","indexOf","set_On_Typing_Event","typingTimeout","lastTyped","messageID","emitTypingEvent","clearTimeout","setTimeout","emitMessageEvent","stringify","ChatRoom","useParams","setSocket","peopleCurrTyping","useEffect","disconnect","App","exact","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f79f304.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Navbar() {\r\n    //===================\r\n    // JSX\r\n    //===================\r\n    return (\r\n    <nav className='font-tourney bg-gray-800 text-white padded-container py-3 px-1 flex justify-between items-center text-4xl'>\r\n        <Link to='/' className='flex items-center'>\r\n            <p className='mr-3'>Chat Now</p>\r\n            <svg className=\"w-7 h-7 \" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z\" clipRule=\"evenodd\"></path></svg>\r\n        </Link>\r\n        <a href='https://github.com/AdmiJW/Simple-Chat-Application' target='_blank' rel='noreferrer noopener'>\r\n            <svg className='w-8 h-8' fill='white' xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z\"/></svg>\r\n        </a>\r\n    </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import { useHistory } from 'react-router-dom';\r\nimport { useState } from 'react';\r\n\r\n// Home page which shows the title and prompts user to enter their username\r\nfunction Homepage() {\r\n    const history = useHistory();\r\n    const [username, setUsername] = useState('');\r\n    const [alertMsg, setAlertMsg] = useState('');\r\n\r\n    // Event Handlers\r\n    const onUsernameChange = (e)=> setUsername(e.target.value);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        setAlertMsg('');\r\n\r\n        // Simple Username Validation\r\n        if (username.length > 20 || username.length < 3)\r\n            return setAlertMsg('Username must be of length 3-20 long!');\r\n        \r\n        history.push(`/chat/${username}`);\r\n    };\r\n\r\n    return (\r\n    <main className='flex-grow flex flex-col justify-center items-center'>\r\n        <div className='flex flex-row justify-center items-center flex-wrap my-4'>\r\n            <h1 className='font-tourney font-medium text-center text-6xl md:text-8xl mx-4'>CHAT NOW</h1>\r\n            <svg className=\"w-20 h-20 sm:ml-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M18 5v8a2 2 0 01-2 2h-5l-5 4v-4H4a2 2 0 01-2-2V5a2 2 0 012-2h12a2 2 0 012 2zM7 8H5v2h2V8zm2 0h2v2H9V8zm6 0h-2v2h2V8z\" clipRule=\"evenodd\"></path></svg>\r\n        </div>\r\n\r\n        {   // Renders Alert Message if and only if it is not empty string\r\n            alertMsg && <div className='px-3 py-2 my-3 text-md text-white bg-red-500 rounded-lg shadow'>{alertMsg}</div>\r\n        }\r\n\r\n        <form onSubmit={onSubmit}>\r\n            <input type='text' className='w-72 md:w-96 rounded-lg border-4 border-gray-400 px-2 py-1 text-2xl' \r\n                name='username' id='username' placeholder='Username' value={username} onChange={onUsernameChange}/>\r\n            <button type='submit' id='username-submit' className='block px-4 py-3 my-5 mx-auto bg-blue-400 rounded-lg shadow-md transition transform hover:bg-blue-500 hover:scale-110'>\r\n                <svg className=\"w-6 h-6\" fill=\"white\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M10.293 15.707a1 1 0 010-1.414L14.586 10l-4.293-4.293a1 1 0 111.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path><path fillRule=\"evenodd\" d=\"M4.293 15.707a1 1 0 010-1.414L8.586 10 4.293 5.707a1 1 0 011.414-1.414l5 5a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0z\" clipRule=\"evenodd\"></path></svg>\r\n            </button>\r\n        </form>\r\n    </main>\r\n    );\r\n}\r\n\r\n\r\nexport default Homepage;","import { useState } from 'react';\r\n\r\nfunction Messagebox(props) {\r\n    const {username, emit_Message, emit_On_Typing_Event, setIsMobileViewOpen} = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n\r\n    const onMessageChange = (e)=> {\r\n        setMessage(e.target.value);\r\n        emit_On_Typing_Event();\r\n    };\r\n    const onSubmit = (e)=> {\r\n        e.preventDefault();\r\n        emit_Message(message);\r\n        setMessage('');\r\n    }\r\n\r\n    //===================\r\n    // JSX\r\n    //===================\r\n    return (\r\n        <form onSubmit={onSubmit} className='flex text-lg md:text-xl z-30 relative' id='chatbox'>\r\n            {/* For the toggling of the mobile client UsersList */}\r\n            <button type='button' onClick={()=> setIsMobileViewOpen((prev)=> !prev)}\r\n                className='absolute md:hidden right-4 -top-20 p-2 bg-blue-500 hover:bg-blue-600 rounded-full shadow-md'>\r\n                <svg className=\"w-10 h-10\" fill=\"none\" stroke=\"white\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197M13 7a4 4 0 11-8 0 4 4 0 018 0z\"></path></svg>\r\n            </button>\r\n\r\n            <input type='text' placeholder={username + \":\"} value={message} onChange={onMessageChange}\r\n                className='flex-grow shadow-inner px-3 py-2 border-2 border-gray-300 rounded-t-md' \r\n                disabled={emit_Message === undefined}/>\r\n            <button type='submit' id='chatbox__send' className='bg-blue-600 px-3 rounded-t-md hover:bg-blue-700'\r\n                disabled={emit_Message === undefined}>\r\n                <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"white\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M12 19l9 2-9-18-9 18 9-2zm0 0v-8\"></path></svg>\r\n            </button>\r\n        </form>\r\n    );\r\n}\r\n\r\n\r\nexport default Messagebox;","\r\nfunction Message(props) {\r\n    // Message processing\r\n    let { isSelf, username, date, text } = props.message;\r\n    date = new Date(date).toLocaleString();\r\n\r\n    //==============\r\n    // JSX\r\n    //==============\r\n    const className = 'my-2 px-3 py-2 bg-opacity-60 rounded-lg shadow-lg bg-green-200 ' + \r\n        (isSelf? 'border-green-400 border-4': 'border-green-200 border-2');\r\n\r\n    return (\r\n        <div className={className}>\r\n            <div className='flex justify-between flex-wrap '>\r\n                <p className='font-bold text-md' >{ username }</p>\r\n                <p className='font-light text-sm text-gray-600'>{ date }</p>\r\n            </div>\r\n            <p className=''>{ text }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","\r\nfunction PendingMessage(props) {\r\n    let { username, text } = props.message;\r\n\r\n    //==============\r\n    // JSX\r\n    //==============\r\n    return (\r\n        <div className='my-2 px-3 py-2 border-2 bg-opacity-60 opacity-50 rounded-lg shadow-lg bg-yellow-200 border-yellow-200'>\r\n            <p className='font-bold text-md' >{ username } (Sending...)</p>\r\n            <p className=''>{ text }</p>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default PendingMessage;","\r\nfunction TypingAlert(props) {\r\n    const { peopleThatAreTyping } = props;\r\n    \r\n    const alert = peopleThatAreTyping.length > 3? 'Multiple people are typing...':\r\n            peopleThatAreTyping.length === 3? `${peopleThatAreTyping[0]}, ${peopleThatAreTyping[1]} and ${peopleThatAreTyping[2]} are typing...`:\r\n            peopleThatAreTyping.length === 2? `${peopleThatAreTyping[0]} and ${peopleThatAreTyping[1]} are typing...`:\r\n                                              `${peopleThatAreTyping[0]} are typing...`\r\n\r\n    return (\r\n        <div className='self-center my-4 px-3 py-2 border-2 bg-opacity-80 rounded-lg shadow-lg bg-gray-400 border-gray-400 text-sm font-medium text-center'>\r\n            {alert}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default TypingAlert;","import Message from './Message';\r\nimport PendingMessage from './PendingMessage';\r\nimport TypingAlert from './TypingAlert';\r\n\r\n\r\nfunction ListMessage(props) {\r\n    const { messages, pendingMessages, peopleThatAreTyping } = props;\r\n\r\n    return (\r\n    <section className='flex-grow px-3 py-2 flex flex-col overflow-y-auto'>   \r\n        {messages.map((e)=> <Message message={e} key={e.date.getTime()} />)}\r\n        {pendingMessages.map((e)=> <PendingMessage message={e} key={e.date.getTime()} />)}\r\n\r\n        {/* Only show typing Alert if there is people typing */}\r\n        { peopleThatAreTyping.length? <TypingAlert peopleThatAreTyping={peopleThatAreTyping} />: \"\" }\r\n    </section>\r\n    );\r\n}\r\n\r\nexport default ListMessage;","\r\nfunction UsersOnline(props) {\r\n\r\n    const { onlineUsers } = props;\r\n\r\n    //===============\r\n    // JSX\r\n    //===============\r\n    return (\r\n    <ul className='flex-grow overflow-y-auto flex flex-col mx-6 md:mx-2'>\r\n        { onlineUsers.map(e => <li key={e}><p className='rounded-md bg-gray-100 text-lg my-1 p-2'>{e}</p></li>) }\r\n    </ul>\r\n    );\r\n}\r\n\r\n\r\nexport default UsersOnline;","\r\nfunction ConnectionMessage(props) {\r\n\r\n    const { connectionMessages } = props;\r\n\r\n    const connectionMessagesJSX = connectionMessages.map(e => {\r\n        switch(e.type) {\r\n            case 'connecting':\r\n                return <li key={e.timestamp}>\r\n                    <p className='rounded-md bg-yellow-100 text-lg my-1 p-2'>Connecting to the chat room...</p>\r\n                </li>;\r\n            case 'joined':\r\n                return <li key={e.timestamp}>\r\n                    <p className='rounded-md bg-green-100 text-lg my-1 p-2'>{e.payload} joined the chat room!</p>\r\n                </li>;\r\n            case 'exited':\r\n                return <li key={e.timestamp}>\r\n                    <p className='rounded-md bg-red-100 text-lg my-1 p-2'>{e.payload} quit the chat room!</p>\r\n                </li>;\r\n            case 'error':\r\n                return <li key={e.timestamp}>\r\n                    <p className='rounded-md bg-red-300 text-lg my-1 p-2'>Error: {e.payload}</p>\r\n                </li>;\r\n            default:\r\n                return '';\r\n        }\r\n    });\r\n\r\n    return (\r\n    <ul className='flex-grow overflow-y-auto flex flex-col mx-6 md:mx-2'>\r\n        { connectionMessagesJSX }\r\n    </ul>\r\n    );\r\n}\r\n\r\n\r\nexport default ConnectionMessage;","import UsersOnline from \"./UsersOnline\";\r\nimport ConnectionMessage from \"./ConnectionMessage\";\r\n\r\nfunction UsersUI(props) {\r\n    const { onlineUsers, connectionMessages, isMobileViewOpen, setIsMobileViewOpen } = props;\r\n\r\n    //===============\r\n    // JSX\r\n    //===============\r\n    // Classname for the outermost, overall component\r\n    const className = (isMobileViewOpen? 'fixed flex ': 'hidden') + ' top-0 left-0 min-w-full min-h-screen max-h-screen p-6 md:flex bg-black bg-opacity-25 z-50 '\r\n                + 'md:relative md:min-h-0 md:p-0 md:min-w-300px md:max-w-50vw';\r\n\r\n    return (\r\n        // The blindfold\r\n        <section className={className}>\r\n            <div className='relative w-full bg-white rounded-md shadow-md py-2 px-6 md:px-3 flex flex-col\r\n                        md:rounded-none max-h-screen'>\r\n                {/* Button to close the UsersUI on mobile screens */}\r\n                <button type='button' onClick={()=> setIsMobileViewOpen((prev)=> !prev)}\r\n                    className='absolute right-3 top-3 md:hidden'>\r\n                    <svg className=\"w-8 h-8\" fill=\"black\" viewBox=\"0 0 20 20\" xmlns=\"http://www.w3.org/2000/svg\"><path fillRule=\"evenodd\" d=\"M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z\" clipRule=\"evenodd\"></path></svg>\r\n                </button>\r\n                \r\n                {/* Top: Users Online\r\n                    Bottom: Connection Statuses */}\r\n                <h4 className='text-center text-2xl font-semibold mb-3'>Users Online</h4>\r\n                <UsersOnline onlineUsers={onlineUsers} />\r\n                <hr className='my-1'/>\r\n                <h4 className='text-center text-2xl font-semibold mb-3'>Connection Status</h4>\r\n                <ConnectionMessage connectionMessages={connectionMessages} />\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default UsersUI;","import io from 'socket.io-client';\r\n\r\n\r\n// Initializes the socket to connect to the socketIO server.\r\n// Returns the socket object.\r\nfunction initializeClientSocket(username, state_setters) {\r\n    const { setOnlineUsers, setPeopleCurrTyping, setMessages, setConnectionMessages,\r\n            setPendingMessages } = state_setters;\r\n\r\n    let socket = io();\r\n    \r\n    setConnectionMessages((prev)=> {\r\n        return [...prev, {\r\n            type: 'connecting',\r\n            timestamp: new Date().getTime()\r\n        }];\r\n    });\r\n\r\n    socket.on('connect_error', (error)=> {\r\n        console.error(`Error while connecting to websocket server. ${error}`);\r\n        setConnectionMessages((prev)=> {\r\n            return [...prev, {\r\n                type: 'error',\r\n                timestamp: new Date().getTime(),\r\n                payload: 'Unable to connect to server'\r\n            }];\r\n        });\r\n    });\r\n\r\n    // Upon connect, set the username and fetch online users\r\n    socket.on('connect', ()=> {\r\n        socket.emit('set-username', username);\r\n        socket.emit('fetch-online-users');\r\n    });\r\n\r\n    // Register all event listeners\r\n    set_On_Disconnected_Event(socket, setOnlineUsers, setConnectionMessages);\r\n    set_On_Error_Event(socket, setConnectionMessages);\r\n    set_On_Fetch_Online_Users_Event(socket, setOnlineUsers);\r\n    set_On_Joined_Event(socket, setOnlineUsers, setConnectionMessages);\r\n    set_On_Message_Event(socket, setPeopleCurrTyping, setMessages);\r\n    set_On_Message_Sent_Event(socket, username, setPendingMessages, setMessages);\r\n    set_On_Stop_Typing_Event(socket, setPeopleCurrTyping);\r\n    set_On_Typing_Event(socket, setPeopleCurrTyping);\r\n\r\n    //=======================================================================\r\n    // Appending the event emitter functions on the socket object itself.\r\n    //=======================================================================\r\n    let typingTimeout = null;\r\n    let lastTyped = 0;          // EPOCH time since last typing. We don't want to flood the server by fast typers\r\n    let messageID = 1;\r\n\r\n    // Upon call, will emit a 'typing' event to server.\r\n    socket.emitTypingEvent = ()=> {\r\n        // If last emitted typed event is less than 2 seconds ago, do not emit another one to the server\r\n        if (new Date().getTime() - lastTyped < 2000) return;\r\n\r\n        lastTyped = new Date().getTime();\r\n        \r\n        if (typingTimeout)\r\n            clearTimeout(typingTimeout);\r\n\r\n        socket.emit('typing');\r\n        typingTimeout = setTimeout(() => {\r\n            socket.emit('stop-typing');\r\n        }, 10000);\r\n    };\r\n\r\n    // Upon call, will append the message to PendingMessages, and emit a 'message' event to server.\r\n    // Sent to Server: {\r\n    //      text: string,\r\n    //      id: number       \r\n    // }\r\n    socket.emitMessageEvent = (text)=> {\r\n        if (!text) return;\r\n\r\n        if (typingTimeout)\r\n            clearTimeout(typingTimeout);\r\n\r\n        setPendingMessages(prev => [...prev, {\r\n            id: messageID,\r\n            username,\r\n            text,\r\n            date: new Date()\r\n        }]);\r\n\r\n        socket.emit('message', JSON.stringify({\r\n            text,\r\n            id: messageID\r\n        }));\r\n        messageID++;\r\n    };\r\n\r\n    return socket;\r\n};\r\n\r\n//================================================\r\n// Event Handlers\r\n//================================================\r\n\r\n// 'joined' event - Indicating a new user has joined the server\r\n// Server sends: Username: string\r\nfunction set_On_Joined_Event(socket, setOnlineUsers, setConnectionMessages) {\r\n    socket.on('joined', (username)=> {\r\n        setOnlineUsers((prev)=> [...prev, username]);\r\n        setConnectionMessages((prev=> [...prev, {\r\n            timestamp: new Date().getTime(),\r\n            type: 'joined',\r\n            payload: username\r\n        }]));\r\n    });\r\n}\r\n\r\n\r\n// 'fetch-online-users' event - Obtains a list of online users from the server\r\n// Server sends: users: array\r\nfunction set_On_Fetch_Online_Users_Event(socket, setOnlineUsers) {\r\n    socket.on('fetch-online-users', (users)=> {\r\n        setOnlineUsers(JSON.parse(users));\r\n    });\r\n}\r\n\r\n\r\n// 'disconnected' event - When a user disconnected\r\n// Server sends: username: string\r\nfunction set_On_Disconnected_Event(socket, setOnlineUsers, setConnectionMessages) {\r\n    socket.on('disconnected', (username)=> {\r\n        setOnlineUsers(prev => prev.filter(e => e !== username));\r\n        setConnectionMessages(prev => [...prev, {\r\n            type: 'exited',\r\n            timestamp: new Date().getTime(),\r\n            payload: username\r\n        }]);\r\n    });\r\n}\r\n\r\n\r\n// 'message' event - When a user sends a message\r\n// Server sends: {\r\n//      username: string,\r\n//      text: string,\r\n//      date: milliseconds since UNIX epoch         \r\n// }\r\nfunction set_On_Message_Event(socket, setPeopleCurrTyping, setMessages) {\r\n    socket.on('message', (payload)=> {\r\n        const { username, text, date } = JSON.parse(payload);\r\n\r\n        setPeopleCurrTyping(prev => prev.filter(e => e !== username));\r\n        setMessages(prev => [...prev, {\r\n            isSelf: false,\r\n            username, \r\n            date: new Date(date),\r\n            text\r\n        }]);\r\n    })\r\n}\r\n\r\n\r\n// 'message-sent' event - Response given When own message is successfully received by the server\r\n// Server sends: {\r\n//      id,\r\n//      text,\r\n//      date: milliseconds since UNIX epoch   \r\n// }\r\nfunction set_On_Message_Sent_Event(socket, selfUsername, setPendingMessages, setMessages) {\r\n    // id, text\r\n    socket.on('message-sent', (msg)=> {\r\n        const { id, text, date } = JSON.parse(msg);\r\n\r\n        setPendingMessages((prev)=> prev.filter(e => e.id != id));\r\n        setMessages((prev)=> [...prev, {\r\n            isSelf: true,\r\n            username: selfUsername,\r\n            date: new Date(date),\r\n            text\r\n        }]);\r\n    });\r\n}\r\n\r\n\r\n// 'typing' event - When a user starts typing\r\n// Server sends: username: string\r\nfunction set_On_Typing_Event(socket, setPeopleCurrTyping) {\r\n    socket.on('typing', username => {\r\n        setPeopleCurrTyping(prev => prev.indexOf(username) !== -1? prev: [...prev, username]);\r\n    });\r\n}\r\n\r\n\r\n// 'stop-typing' event - When a user stopped typing for ~15s (May change. Refer Code below)\r\n// Server sends: username: string\r\nfunction set_On_Stop_Typing_Event(socket, setPeopleCurrTyping) {\r\n    socket.on('stop-typing', username => {\r\n        setPeopleCurrTyping(prev => prev.filter(e => e !== username));\r\n    });\r\n}\r\n\r\n\r\n// 'error' event - Server side error\r\n// Server sends: errorMsg: string\r\nfunction set_On_Error_Event(socket, setConnectionMessages) {\r\n    socket.on('error', errorMsg => {\r\n        setConnectionMessages(prev => [...prev, {\r\n            type: 'error',\r\n            timestamp: new Date().getTime(),\r\n            payload: errorMsg\r\n        }]);\r\n    });\r\n}\r\n\r\n\r\nexport default initializeClientSocket;","import { Fragment, useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport Messagebox from \"./Components/Messagebox\";\r\nimport ListMessage from './Components/ListMessage';\r\nimport UsersUI from './Components/UsersUI';\r\n\r\nimport initializeClientSocket from '../client-socket';\r\n\r\nfunction ChatRoom() {\r\n    const { username } = useParams();\r\n\r\n    // States\r\n    const [socket, setSocket] = useState({});\r\n    const [onlineUsers, setOnlineUsers ] = useState([]);\r\n    const [peopleCurrTyping, setPeopleCurrTyping ] = useState([]);\r\n    const [messages, setMessages ] = useState([]);\r\n    const [connectionMessages, setConnectionMessages ] = useState([]);\r\n    const [pendingMessages, setPendingMessages ] = useState([]);\r\n    const [isMobileViewOpen, setIsMobileViewOpen] = useState(false);\r\n\r\n    // UseEffect(), to connect to the server\r\n    // This will only run once - When the component mounts.\r\n    // The cleanup function will ensure that the disconnection with chat room is done correctly\r\n    useEffect(()=> {\r\n        const socket = initializeClientSocket(username, {\r\n            setOnlineUsers, setPeopleCurrTyping, setMessages, setConnectionMessages, setPendingMessages\r\n        });\r\n\r\n        setSocket(socket);\r\n\r\n        // Cleanup / Teardown function\r\n        return function cleanup() {\r\n            socket.disconnect(true);\r\n        }\r\n    }, [username]);\r\n    \r\n\r\n    //===============\r\n    // JSX\r\n    //===============\r\n    return (\r\n    <Fragment>\r\n        {/* Left - ListMessage, \r\n            Right - Users UI (Online Users, Connection messages) */}\r\n        <main className='flex flex-grow overflow-y-hidden'>\r\n            <ListMessage messages={messages} pendingMessages={pendingMessages} peopleThatAreTyping={peopleCurrTyping} />\r\n            <UsersUI onlineUsers={onlineUsers} connectionMessages={connectionMessages}\r\n                isMobileViewOpen={isMobileViewOpen} setIsMobileViewOpen={setIsMobileViewOpen} />\r\n        </main>\r\n\r\n        <Messagebox username={username} \r\n            emit_Message={socket.emitMessageEvent} \r\n            emit_On_Typing_Event={socket.emitTypingEvent}\r\n            setIsMobileViewOpen={setIsMobileViewOpen} />\r\n    </Fragment>\r\n    );\r\n}\r\n\r\n\r\nexport default ChatRoom;","import React from 'react';\nimport Navbar from './Components/Navbar';\nimport Homepage from './Homepage';\nimport ChatRoom from './ChatRoom';\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n\t//===============\n\t// JSX\n\t//===============\n\treturn (\n\t<BrowserRouter>\n\t\t<div className='min-h-screen max-h-screen flex flex-col'>\n\t\t\t<Navbar />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path='/'>\n\t\t\t\t\t<Homepage />\n\t\t\t\t</Route>\n\t\t\t\t<Route exact path='/chat/:username'>\n\t\t\t\t\t<ChatRoom />\n\t\t\t\t</Route>\n\t\t\t</Switch>\n\t\t</div>\n\t</BrowserRouter>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Pages/App';\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}